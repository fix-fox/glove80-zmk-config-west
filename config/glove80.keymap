/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT_LAYER 0
#define MAGIC_LAYER 1
#define FACTORY_TEST_LAYER 2
#define HEBREW_LAYER 3
#define CURSOR_LAYER 4
#define NUMBERS_LAYER 5
#define SYMBOLS_LAYER 6
#define HEBREW_SYMBOLS_LAYER 7
#define SYSTEM_LAYER 8
#define MOUSE_LAYER 9
#define ORIGINAL_DEFAULT_LAYER 10
#define MACROS_LAYER 11

// Define common hold-tap timing configuration to keep it DRY

#define HT_QUICK_TAP_MS 175
#define HT_PRIOR_IDLE_MS 130
#define HT_FLAVOR "balanced"
#define HT_TAPPING_TERM_MS 200
#define HT_INDEX_MS 180  // Strongest fingers
#define HT_MIDDLE_MS 190
#define HT_RING_MS 220
#define HT_PINKY_MS 280
#define HT_PINKY_IDLE_MS 160  // Extra safety for pinkies

// Common trigger positions

#define LEFT_HAND_KEYS 52 53 54 69 70 71 5 6 7 8 9 16 17 18 19 20 21 28 29 30 31 32 33 40 41 42 43 44 45 55 56 57 58 59 60 61 62 63 72 73 74 75 76 77 78 79
#define RIGHT_HAND_KEYS 0 1 2 3 4 10 11 12 13 14 15 22 23 24 25 26 27 34 35 36 37 38 39 46 47 48 49 50 51 52 53 54 64 65 66 67 68 69 70 71 55 56 57 72 73 74

/ {
    behaviors {
        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <HT_TAPPING_TERM_MS>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        td_caps: td_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CAPS";
            #binding-cells = <0>;
            tapping-term-ms = <HT_TAPPING_TERM_MS>;
            bindings = <&caps_word>, <&kp CLCK>;
        };

        // Enhanced layer-tap with quick-tap for natural key repeat

        lt_repeat: layer_tap_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_REPEAT";
            #binding-cells = <2>;
            flavor =
            HT_FLAVOR;
            tapping-term-ms = <HT_TAPPING_TERM_MS>;
            quick-tap-ms = <HT_QUICK_TAP_MS>;
            require-prior-idle-ms = <HT_PRIOR_IDLE_MS>;
            hold-trigger-on-release;
            bindings = <&mo>, <&kp>;
        };

        // Custom mod-morph for Q key: q normally, ? with shift

        q_qmark: q_question_mark {
            compatible = "zmk,behavior-mod-morph";
            label = "Q_QMARK";
            #binding-cells = <0>;
            bindings = <&kp Q>, <&kp LS(FSLH)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor =
            HT_FLAVOR;
            tapping-term-ms = <HT_TAPPING_TERM_MS>;
            quick-tap-ms = <HT_QUICK_TAP_MS>;
            require-prior-idle-ms = <HT_PRIOR_IDLE_MS>;
            hold-trigger-key-positions = <LEFT_HAND_KEYS>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor =
            HT_FLAVOR;
            tapping-term-ms = <HT_TAPPING_TERM_MS>;
            quick-tap-ms = <HT_QUICK_TAP_MS>;
            require-prior-idle-ms = <HT_PRIOR_IDLE_MS>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS>;
            hold-trigger-on-release;
        };

        // Pinky-specific (more conservative)

        hmp_l: hmp_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor =
            HT_FLAVOR;
            tapping-term-ms = <HT_PINKY_MS>;
            quick-tap-ms = <HT_QUICK_TAP_MS>;
            require-prior-idle-ms = <HT_PINKY_IDLE_MS>;
            hold-trigger-key-positions = <LEFT_HAND_KEYS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };

        hmp_r: hmp_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor =
            HT_FLAVOR;
            tapping-term-ms = <HT_PINKY_MS>;
            quick-tap-ms = <HT_QUICK_TAP_MS>;
            require-prior-idle-ms = <HT_PINKY_IDLE_MS>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };

        // Index finger (faster)

        hmi_l: hmi_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor =
            HT_FLAVOR;
            tapping-term-ms = <HT_INDEX_MS>;
            quick-tap-ms = <HT_QUICK_TAP_MS>;
            require-prior-idle-ms = <HT_PRIOR_IDLE_MS>;
            hold-trigger-key-positions = <LEFT_HAND_KEYS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };

        hmi_r: hmi_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor =
            HT_FLAVOR;
            tapping-term-ms = <HT_INDEX_MS>;
            quick-tap-ms = <HT_QUICK_TAP_MS>;
            require-prior-idle-ms = <HT_PRIOR_IDLE_MS>;
            hold-trigger-key-positions = <RIGHT_HAND_KEYS>;
            hold-trigger-on-release;
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        lang_toggle: lang_toggle {
            label = "LANG_TOGGLE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_tap>,
                <&tog 3>;
        };

        // Delete to beginning of line (Ctrl+U - "kill line backward")

        delete_to_bol: delete_to_bol {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp HOME>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp BSPC>;
        };

        // Delete to end of line (Ctrl+K - "kill line")

        delete_to_eol: delete_to_eol {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp END>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp BSPC>;
        };

        // Delete entire line

        delete_line: delete_line {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_tap>,
                <&kp HOME>,
                <&macro_press>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp END>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp BSPC &kp DEL>;
        };

        // Delete word forward (Ctrl+D or Alt+D)

        delete_word_forward: delete_word_forward {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL &kp LSHFT>,
                <&macro_tap>,
                <&kp RIGHT>,
                <&macro_release>,
                <&kp LCTRL &kp LSHFT>,
                <&macro_tap>,
                <&kp BSPC>;
        };

        // Delete word backward (Ctrl+W or Ctrl+Backspace)

        delete_word_backward: delete_word_backward {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp BSPC>,
                <&macro_release>,
                <&kp LCTRL>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        hebrew_symbols {
            if-layers = <3 6>;
            then-layer = <7>;
        };
    };

    combos {
        compatible = "zmk,combos";

        // These are not great because they interfere with ctrl and shift usage.
        // combo_macros_right {
        //     timeout-ms = <50>;
        //     key-positions = <42 41>;  // N (RSHFT), E (RCTRL)
        //     bindings = <&mo MACROS_LAYER>;
        //     layers = <0>;
        // };
        // combo_macros_left {
        //     timeout-ms = <50>;
        //     key-positions = <38 37>;  // S (LCTRL), T (LSHFT)
        //     bindings = <&mo MACROS_LAYER>;
        //     layers = <0>;
        // };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&to 0                   &to 10             &none            &none             &none                                                                                                                                                                       &none                  &none              &none             &none           &kp LG(L)
&none                   &kp N1             &kp N2           &kp N3            &kp N4                &kp N5                                                                                                                        &kp N6                  &kp N7                 &kp N8             &kp N9            &kp N0          &none
&none                   &kp Q              &kp W            &kp F             &kp P                 &kp B                                                                                                                         &kp J                   &kp L                  &kp U              &kp Y             &kp SEMI        &none
&none                   &hmp_l LEFT_GUI A  &hml LEFT_ALT R  &hml LCTRL S      &hmi_l LEFT_SHIFT T   &hmi_l LG(LEFT_ALT) G                                                                                                         &hmi_r RG(RIGHT_ALT) M  &hmi_r RSHFT N         &hml RCTRL E       &hmr RIGHT_ALT I  &hmp_r RMETA O  &kp APOS
&none                   &kp Z              &kp X            &kp C             &lt_repeat 11 D       &kp V                  &lt_repeat 8 ESCAPE     &lt_repeat 9 TAB  &lang_toggle    &none     &kp RC(SPACE)  &kp RET             &kp K                   &lt_repeat 11 H        &kp COMMA          &kp DOT           &kp FSLH        &none
&magic 1 DEFAULT_LAYER  &kp GRAVE          &kp LEFT_BRACE   &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS                         &lt_repeat 4 BACKSPACE  &lt_repeat 5 DEL  &none           &td_caps  &kp TAB        &lt_repeat 6 SPACE                          &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE   &kp TILDE       &magic 1 DEFAULT_LAYER
            >;
        };

        magic_layer {
            bindings = <
&trans       &none            &none            &none            &none                                                                                       &none  &none  &none  &bt BT_CLR  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                               &none  &none  &none  &none  &none       &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &none  &none  &none  &none       &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                     &none  &none  &none  &none  &none       &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none           &none  &none  &none  &none  &none  &none  &none  &none       &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB    &none  &none  &none         &none  &none  &none  &none       &to 2
            >;
        };

        factory_test_layer {
            bindings = <
&to 0   &kp N6  &kp N2  &kp N8  &kp N4                                                                    &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                    &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                    &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                    &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6    &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9    &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };

        hebrew_layer {
            // Hebrew base layer - identical to English QWERTY for Hebrew typing

            bindings = <
&trans  &trans             &trans           &trans        &trans                                                                                                                      &trans          &trans        &trans            &trans             &trans
&trans  &trans             &trans           &trans        &trans               &trans                                                                         &trans                  &trans          &trans        &trans            &trans             &trans
&trans  &kp PERIOD         &kp COMMA        &kp E         &kp R                &kp T                                                                          &kp Y                   &kp U           &kp I         &kp O             &kp P              &trans
&trans  &hmp_l LEFT_GUI A  &hml LEFT_ALT S  &hml LCTRL D  &hmi_l LEFT_SHIFT F  &hmi_l LG(LEFT_ALT) G                                                          &hmi_r RG(RIGHT_ALT) H  &hmi_r RSHFT J  &hml RCTRL K  &hmr RIGHT_ALT L  &hmp_r RMETA SEMI  &kp APOS
&trans  &kp Z              &kp X            &kp C         &kp V                &kp B                  &kp X   &lang_toggle  &trans    &trans  &trans  &trans  &kp N                   &kp M           &kp APOS      &kp SLASH         &q_qmark           &trans
&trans  &trans             &trans           &trans        &trans                                      &trans  &trans        &trans    &trans  &trans  &trans                          &trans          &trans        &trans            &trans             &trans
            >;
        };

        cursor_layer {
            bindings = <
&trans  &trans  &trans     &trans     &trans                                                                       &trans     &trans    &trans     &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans                                                    &trans  &trans     &trans    &trans     &trans  &trans
&trans  &trans  &kp LC(Y)  &kp LC(Z)  &trans     &trans                                                    &trans  &kp PG_UP  &kp UP    &kp PG_DN  &trans  &trans
&trans  &trans  &kp LALT   &kp LCTRL  &kp LSHFT  &trans                                                    &trans  &kp LEFT   &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans  &kp LC(X)  &kp LC(C)  &kp LC(V)  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp HOME   &trans    &kp END    &trans  &trans
&trans  &trans  &trans     &kp LC(Y)  &kp LC(Z)          &trans  &trans  &trans    &trans  &trans  &trans          &trans     &trans    &trans     &trans  &trans
            >;
        };

        numbers_layer {
            bindings = <
&trans  &trans  &trans        &trans     &trans                                                                                                  &trans     &trans  &trans  &trans     &trans
&trans  &trans  &trans        &trans     &trans          &trans                                                                        &trans    &kp CARET  &trans  &trans  &trans     &trans
&trans  &trans  &kp LC(Y)     &kp LC(Z)  &trans          &trans                                                                        &trans    &kp N7     &kp N8  &kp N9  &kp COLON  &kp PERCENT
&trans  &trans  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans                                                                        &kp PLUS  &kp N4     &kp N5  &kp N6  &kp MINUS  &trans
&trans  &trans  &trans        &trans     &trans          &trans  &trans  &trans  &trans    &kp LESS_THAN  &kp GREATER_THAN  &kp EQUAL  &trans    &kp N1     &kp N2  &kp N3  &kp FSLH   &kp LS(STAR)
&trans  &trans  &trans        &trans     &trans                  &trans  &to 0   &trans    &kp COMMA      &kp DOT           &kp N0               &trans     &trans  &trans  &trans     &trans
            >;
        };

        symbols_layer {
            bindings = <
&trans  &trans         &trans          &trans     &trans                                                                                          &trans                 &trans     &trans           &trans            &trans
&trans  &trans         &trans          &trans     &trans                &trans                                                         &trans     &trans                 &trans     &trans           &trans            &trans
&kp X   &kp EXCL       &kp AT          &kp POUND  &kp DLLR              &kp PERCENT                                                    &kp CARET  &kp AMPS               &kp STAR   &kp PIPE         &trans            &trans
&kp X   &kp BSLH       &kp EQUAL       &kp MINUS  &kp UNDER             &kp GRAVE                                                      &kp SQT    &kp DOUBLE_QUOTES      &kp PLUS   &kp TILDE        &kp FSLH          &trans
&trans  &kp LESS_THAN  &kp LEFT_BRACE  &kp LBKT   &kp LEFT_PARENTHESIS  &kp SEMI     &trans  &trans  &trans    &trans  &trans  &trans  &kp COLON  &kp RIGHT_PARENTHESIS  &kp RBKT   &kp RIGHT_BRACE  &kp GREATER_THAN  &kp X
&trans  &trans         &trans          &trans     &trans                             &to 5   &trans  &trans    &trans  &trans  &trans             &kp LC(Z)              &kp LC(Y)  &trans           &trans            &trans
            >;
        };

        hebrew_symbols_layer {
            // Hebrew-specific symbol overrides
            // Most keys are transparent and fall through to SYMBOLS layer
            // Only define keys that need different positions for Hebrew

            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                       &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                       &kp W   &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &kp GRAVE  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans             &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        system_layer {
            bindings = <
&trans  &trans  &trans             &trans            &trans                                                                                                    &trans  &trans  &trans  &trans   &trans
&trans  &trans  &trans             &trans            &trans           &trans                                                                           &trans  &trans  &trans  &trans  &trans   &trans
&trans  &trans  &kp C_VOLUME_DOWN  &kp C_MUTE        &kp C_VOLUME_UP  &kp C_BRIGHTNESS_INC                                                             &trans  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &trans  &kp C_PREV         &kp C_PLAY_PAUSE  &kp C_NEXT       &kp C_BRIGHTNESS_DEC                                                             &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans  &trans             &trans            &trans           &trans                &trans  &trans  &trans    &trans  &trans  &kp PRINTSCREEN  &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
&trans  &trans  &trans             &trans            &trans                                 &trans  &trans  &trans    &trans  &trans  &trans                   &trans  &trans  &trans  &trans   &trans
            >;
        };

        mouse_layer {
            bindings = <
&trans  &trans  &trans          &trans          &trans                                                                             &trans          &trans          &trans           &trans  &trans
&trans  &trans  &trans          &trans          &trans           &trans                                                    &trans  &trans          &trans          &trans           &trans  &trans
&trans  &trans  &trans          &msc SCRL_UP    &trans           &trans                                                    &trans  &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &trans  &trans
&trans  &trans  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_RIGHT  &trans                                                    &trans  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &trans  &trans
&trans  &trans  &trans          &trans          &trans           &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &mkp LCLK       &mkp MB3        &mkp RCLK        &trans  &trans
&trans  &trans  &trans          &trans          &trans                   &trans  &trans  &trans    &trans  &trans  &trans          &trans          &trans          &trans           &trans  &trans
            >;
        };

        original_default_layer {
            // Almost. Still can "escape" to the default layer with the top left key.
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&to 0       &kp F2    &kp F3   &kp F4    &kp F5                                                                                            &kp F6  &kp F7     &kp F8    &kp F9    &kp F10
&kp EQUAL   &kp N1    &kp N2   &kp N3    &kp N4     &kp N5                                                                         &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB     &kp Q     &kp W    &kp E     &kp R      &kp T                                                                          &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&kp ESC     &kp A     &kp S    &kp D     &kp F      &kp G                                                                          &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&kp GRAVE   &kp Z     &kp X    &kp C     &kp V      &kp B   &kp LSHFT  &kp LCTRL  &kp LEFT_GUI    &kp RMETA  &kp RCTRL  &kp RSHFT  &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &kp PG_UP
&magic 1 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &kp BSPC   &kp DEL    &kp LALT        &kp RALT   &kp RET    &kp SPACE          &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &kp PG_DN
            >;
        };

        macros_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans          &trans          &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &delete_to_bol  &delete_to_eol  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
