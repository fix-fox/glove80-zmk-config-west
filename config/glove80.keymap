/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define HEBREW 1
#define MAGIC 2
#define CURSOR 3
#define NUMBERS 4
#define SYMBOLS 5
#define HEBREW_SYMBOLS 6
#define FACTORY_TEST 7

// Define common hold-tap timing configuration to keep it DRY

#define HT_QUICK_TAP_MS 180
#define HT_PRIOR_IDLE_MS 150
#define HT_TAPPING_TERM_MS 200
#define HT_FLAVOR "balanced"

// An attempt to configure &mt globally, supposedly for quicker and better home row mods.
// Sometimes it fires too eagerly, when for example I'm rolling my fingers on asdf.
// I suspect what happens is that I press two of the chars at the same time so it's interpreted as a double hold.
// Let's still try it out for a while.

&mt {
    quick-tap-ms = <HT_QUICK_TAP_MS>;
    require-prior-idle-ms = <HT_PRIOR_IDLE_MS>;
    tapping-term-ms = <HT_TAPPING_TERM_MS>;
    flavor =
    HT_FLAVOR;
    hold-trigger-on-release;
};

/ {
    behaviors {
        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <HT_TAPPING_TERM_MS>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        td_caps: td_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_CAPS";
            #binding-cells = <0>;
            tapping-term-ms = <HT_TAPPING_TERM_MS>;
            bindings = <&caps_word>, <&kp CLCK>;
        };

        // Enhanced layer-tap with quick-tap for natural key repeat

        lt_repeat: layer_tap_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_REPEAT";
            #binding-cells = <2>;
            flavor =
            HT_FLAVOR;
            tapping-term-ms = <HT_TAPPING_TERM_MS>;
            quick-tap-ms = <HT_QUICK_TAP_MS>;
            require-prior-idle-ms = <HT_PRIOR_IDLE_MS>;
            hold-trigger-on-release;
            bindings = <&mo>, <&kp>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        lang_toggle: lang_toggle {
            label = "LANG_TOGGLE";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_tap>,
                <&kp SPACE>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_tap>,
                <&tog 1>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        hebrew_symbols {
            if-layers = <1 4>;
            then-layer = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&to 0       &none           &none           &none        &none                                                                                                                             &none        &none         &none            &none           &kp K_LOCK
&none       &kp N1          &kp N2          &kp N3       &kp N4            &kp N5                                                                                                  &kp N6  &kp N7       &kp N8        &kp N9           &kp N0          &none
&none       &kp Q           &kp W           &kp E        &kp R             &kp T                                                                                                   &kp Y   &kp U        &kp I         &kp O            &kp P           &none
&none       &mt LEFT_GUI A  &mt LEFT_ALT S  &mt LCTRL D  &mt LEFT_SHIFT F  &kp G                                                                                                   &kp H   &mt RSHFT J  &mt RCTRL K   &mt RIGHT_ALT L  &mt RMETA SEMI  &kp SQT
&none       &kp Z           &kp X           &kp C        &kp V             &kp B   &lt_repeat 6 ESCAPE     &lang_toggle      &none    &none     &kp RC(SPACE)  &kp RET             &kp N   &kp M        &kp COMMA     &kp DOT          &kp FSLH        &none
&magic 8 0  &kp GRAVE       &kp K_CUT       &kp LC(C)    &kp LC(V)                 &lt_repeat 2 BACKSPACE  &lt_repeat 3 DEL  &none    &td_caps  &kp TAB        &lt_repeat 4 SPACE          &kp K_UNDO   &kp LS(LPAR)  &kp LS(RPAR)     &kp K_REDO      &magic 8 0
            >;
        };

        hebrew_layer {
            // Hebrew base layer - identical to English QWERTY for Hebrew typing

            bindings = <
&trans  &trans      &trans     &trans  &trans                                                                          &trans  &trans   &trans     &trans  &trans
&trans  &trans      &trans     &trans  &trans  &trans                                                          &trans  &trans  &trans   &trans     &trans  &trans
&trans  &kp PERIOD  &kp COMMA  &trans  &trans  &trans                                                          &trans  &trans  &trans   &trans     &trans  &trans
&trans  &trans      &trans     &trans  &trans  &trans                                                          &trans  &trans  &trans   &trans     &trans  &trans
&trans  &trans      &trans     &trans  &trans  &trans  &trans  &lang_toggle  &trans    &trans  &trans  &trans  &trans  &trans  &kp SQT  &kp SLASH  &kp Q   &trans
&trans  &trans      &trans     &trans  &trans          &trans  &trans        &trans    &trans  &trans  &trans          &trans  &trans   &trans     &trans  &trans
            >;
        };

        cursor_layer {
            bindings = <
&trans  &trans  &trans     &trans     &trans                                                                       &trans     &trans    &trans     &trans  &trans
&trans  &trans  &trans     &trans     &trans     &trans                                                    &trans  &trans     &trans    &trans     &trans  &trans
&trans  &trans  &kp LC(Y)  &kp LC(Z)  &trans     &trans                                                    &trans  &kp PG_UP  &kp UP    &kp PG_DN  &trans  &trans
&trans  &trans  &kp LALT   &kp LCTRL  &kp LSHFT  &trans                                                    &trans  &kp LEFT   &kp DOWN  &kp RIGHT  &trans  &trans
&trans  &trans  &kp LC(X)  &kp LC(C)  &kp LC(V)  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &kp HOME   &trans    &kp END    &trans  &trans
&trans  &trans  &trans     &kp LC(Y)  &kp LC(Z)          &trans  &trans  &trans    &trans  &trans  &trans          &trans     &trans    &trans     &trans  &trans
            >;
        };

        numbers_layer {
            bindings = <
&trans  &trans  &trans              &trans     &trans                                                                                    &trans         &trans        &trans        &trans         &trans
&trans  &trans  &trans              &trans     &trans     &trans                                                               &trans    &kp LS(CARET)  &trans        &trans        &trans         &trans
&trans  &trans  &trans              &trans     &trans     &trans                                                               &trans    &kp N7         &kp N8        &kp N9        &kp LS(COLON)  &kp LS(PRCNT)
&trans  &trans  &kp LS(UNDERSCORE)  &trans     &trans     &trans                                                               &kp PLUS  &kp N4         &kp N5        &kp N6        &kp MINUS      &kp LS(PLUS)
&trans  &trans  &trans              &trans     &trans     &trans  &trans  &trans  &trans    &kp LS(LT)  &kp LS(GT)  &kp EQUAL  &trans    &kp N1         &kp N2        &kp N3        &kp FSLH       &kp LS(STAR)
&trans  &trans  &trans              &kp LC(Y)  &kp LC(Z)          &trans  &trans  &trans    &kp COMMA   &kp DOT     &kp N0               &kp LBKT       &kp LS(LPAR)  &kp LS(RPAR)  &kp RBKT       &trans
            >;
        };

        symbols_layer {
            bindings = <
&trans         &trans         &trans        &trans         &trans                                                                                                &trans        &trans        &trans        &trans         &trans
&trans         &trans         &trans        &trans         &trans        &trans                                                                   &trans         &trans        &trans        &trans        &trans         &trans
&kp LS(LBRC)   &kp LBKT       &kp LS(LPAR)  &kp LS(RPAR)   &kp RBKT      &kp LS(RBRC)                                                             &trans         &kp LS(AMPS)  &kp LS(STAR)  &kp LS(PIPE)  &trans         &trans
&kp LS(POUND)  &kp LS(CARET)  &kp EQUAL     &kp LS(UNDER)  &kp LS(DLLR)  &kp LS(STAR)                                                             &kp BSLH       &kp SQT       &kp DQT       &kp GRAVE     &kp SEMICOLON  &trans
&trans         &kp LS(LT)     &kp LS(PLUS)  &kp MINUS      &kp LS(GT)    &trans        &kp LS(COLON)    &trans  &trans    &trans  &trans  &trans  &kp LS(TILDE)  &kp FSLH      &kp COMMA     &kp DOT       &kp LS(QMARK)  &trans
&trans         &trans         &trans        &trans         &trans                      &kp EXCLAMATION  &kp AT  &trans    &trans  &trans  &trans                 &kp LC(Z)     &kp LC(Y)     &trans        &trans         &trans
            >;
        };

        hebrew_symbols_layer {
            // Hebrew-specific symbol overrides
            // Most keys are transparent and fall through to SYMBOLS layer
            // Only define keys that need different positions for Hebrew

            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                    &trans  &trans   &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans   &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans   &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &kp W   &trans   &trans     &kt GRAVE  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &kp SQT  &kp SLASH  &trans     &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans   &trans     &trans     &trans
            >;
        };

        system_layer {
            bindings = <
&trans  &trans  &trans             &trans            &trans                                                                                                    &trans  &trans  &trans  &trans   &trans
&trans  &trans  &trans             &trans            &trans           &trans                                                                           &trans  &trans  &trans  &trans  &trans   &trans
&trans  &trans  &kp C_VOLUME_DOWN  &kp C_MUTE        &kp C_VOLUME_UP  &kp C_BRIGHTNESS_INC                                                             &trans  &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &trans  &kp C_PREV         &kp C_PLAY_PAUSE  &kp C_NEXT       &kp C_BRIGHTNESS_DEC                                                             &trans  &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans  &trans             &trans            &trans           &trans                &trans  &trans  &trans    &trans  &trans  &kp PRINTSCREEN  &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
&trans  &trans  &trans             &trans            &trans                                 &trans  &trans  &trans    &trans  &trans  &trans                   &trans  &trans  &trans  &trans   &trans
            >;
        };

        magic_layer {
            bindings = <
&trans       &none            &none            &none            &none                                                                                       &none  &none  &none  &bt BT_CLR  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                               &none  &none  &none  &none  &none       &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &none  &none  &none  &none       &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                     &none  &none  &none  &none  &none       &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none           &none  &none  &none  &none  &none  &none  &none  &none       &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB    &none  &none  &none         &none  &none  &none  &none       &to 6
            >;
        };

        factory_test_layer {
            bindings = <
&to 0   &kp N6  &kp N2  &kp N8  &kp N4                                                                    &kp N4  &kp N8  &kp N2  &kp N6  &kp N0
&kp N1  &kp N7  &kp N3  &kp N9  &kp N5  &kp N0                                                    &kp N0  &kp N5  &kp N9  &kp N3  &kp N7  &kp N1
&kp N2  &kp N8  &kp N4  &kp N0  &kp N6  &kp N1                                                    &kp N1  &kp N6  &kp N0  &kp N4  &kp N8  &kp N2
&kp N3  &kp N9  &kp N5  &kp N1  &kp N7  &kp N2                                                    &kp N2  &kp N7  &kp N1  &kp N5  &kp N9  &kp N3
&kp N4  &kp N0  &kp N6  &kp N2  &kp N8  &kp N3  &kp N4  &kp N5  &kp N6    &kp N6  &kp N5  &kp N4  &kp N3  &kp N8  &kp N2  &kp N6  &kp N0  &kp N4
&kp N5  &kp N1  &kp N7  &kp N3  &kp N9          &kp N7  &kp N8  &kp N9    &kp N9  &kp N8  &kp N7          &kp N9  &kp N3  &kp N7  &kp N1  &kp N5
            >;
        };
    };
};
